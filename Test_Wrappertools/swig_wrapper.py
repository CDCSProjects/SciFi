# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swig_wrapper
else:
    import _swig_wrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Customer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    customer_id = property(_swig_wrapper.Customer_customer_id_get, _swig_wrapper.Customer_customer_id_set)
    shipping_address = property(_swig_wrapper.Customer_shipping_address_get, _swig_wrapper.Customer_shipping_address_set)

    def __init__(self, no, s, c):
        _swig_wrapper.Customer_swiginit(self, _swig_wrapper.new_Customer(no, s, c))

    def show_data(self):
        return _swig_wrapper.Customer_show_data(self)

    def get_shipping(self):
        return _swig_wrapper.Customer_get_shipping(self)
    __swig_destroy__ = _swig_wrapper.delete_Customer

# Register Customer in _swig_wrapper:
_swig_wrapper.Customer_swigregister(Customer)

class Product(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    product_id = property(_swig_wrapper.Product_product_id_get, _swig_wrapper.Product_product_id_set)
    price = property(_swig_wrapper.Product_price_get, _swig_wrapper.Product_price_set)

    def __init__(self, *args):
        _swig_wrapper.Product_swiginit(self, _swig_wrapper.new_Product(*args))

    def overview(self):
        return _swig_wrapper.Product_overview(self)
    __swig_destroy__ = _swig_wrapper.delete_Product

# Register Product in _swig_wrapper:
_swig_wrapper.Product_swigregister(Product)

class Book(Product):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isbn = property(_swig_wrapper.Book_isbn_get, _swig_wrapper.Book_isbn_set)
    author = property(_swig_wrapper.Book_author_get, _swig_wrapper.Book_author_set)

    def __init__(self, *args):
        _swig_wrapper.Book_swiginit(self, _swig_wrapper.new_Book(*args))

    def overview_book(self):
        return _swig_wrapper.Book_overview_book(self)
    __swig_destroy__ = _swig_wrapper.delete_Book

# Register Book in _swig_wrapper:
_swig_wrapper.Book_swigregister(Book)



